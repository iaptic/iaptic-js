#!/bin/bash

# Function to extract version from package.json
get_package_version() {
    grep '"version":' package.json | cut -d'"' -f4
}

# Function to extract version from package-lock.json
get_package_lock_version() {
    grep '"version":' package-lock.json | head -1 | cut -d'"' -f4
}

# Function to extract version from index.ts
get_index_version() {
    grep 'version:' src/index.ts | cut -d"'" -f2
}

# Function to extract version from CHANGELOG.md
get_changelog_version() {
    grep '^## ' CHANGELOG.md | head -1 | cut -d' ' -f2
}

# Function to extract UMD version from README.md
get_readme_umd_version() {
    grep 'cdn.jsdelivr.net/npm/iaptic-js@' README.md | head -1 | cut -d'@' -f2 | cut -d'/' -f1
}

# Function to extract ESM version from README.md
get_readme_esm_version() {
    grep 'cdn.jsdelivr.net/npm/iaptic-js@' README.md | tail -1 | cut -d'@' -f2 | cut -d'/' -f1
}

# Get versions from all files
pkg_version=$(get_package_version)
pkg_lock_version=$(get_package_lock_version)
index_version=$(get_index_version)
changelog_version=$(get_changelog_version)
readme_umd_version=$(get_readme_umd_version)
readme_esm_version=$(get_readme_esm_version)

# Check if all versions match
if [ "$pkg_version" = "$pkg_lock_version" ] && \
   [ "$pkg_version" = "$index_version" ] && \
   [ "$pkg_version" = "$changelog_version" ] && \
   [ "$pkg_version" = "$readme_umd_version" ] && \
   [ "$pkg_version" = "$readme_esm_version" ]; then
    echo "All versions match: $pkg_version"
    exit 0
else
    echo "Version mismatch detected:"
    echo "package.json: $pkg_version"
    echo "package-lock.json: $pkg_lock_version"
    echo "src/index.ts: $index_version"
    echo "CHANGELOG.md: $changelog_version"
    echo "README.md (UMD): $readme_umd_version"
    echo "README.md (ESM): $readme_esm_version"
    
    read -p "Would you like to open these files in vim to fix the versions? (y/n) " answer
    if [ "$answer" = "y" ]; then
        vim -p package.json package-lock.json src/index.ts CHANGELOG.md README.md
    fi
    exit 1
fi
